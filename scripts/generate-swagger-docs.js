#!/usr/bin/env node

/**
 * Generate Swagger/OpenAPI documentation for the Issues API
 * 
 * This script extracts OpenAPI annotations from the Issues API PHP class
 * and generates:
 * 1. OpenAPI specification JSON file
 * 2. Swagger UI HTML documentation page
 * 
 * Usage: node scripts/generate-swagger-docs.js
 */

const fs = require('fs');
const path = require('path');
const { parseOpenAPIFromPHP } = require('./swagger-parser');

// Ensure docs/swagger directory exists
const docsDir = path.join(__dirname, '..', 'docs', 'swagger');
if (!fs.existsSync(docsDir)) {
    fs.mkdirSync(docsDir, { recursive: true });
}

// Path to the Issues API PHP file
const issuesAPIPath = path.join(__dirname, '..', 'includes', 'classes', 'Rest', 'IssuesAPI.php');

try {
    // Read the PHP file
    const phpContent = fs.readFileSync(issuesAPIPath, 'utf8');
    
    // Parse OpenAPI annotations from PHP
    const swaggerSpec = parseOpenAPIFromPHP(phpContent);
    
    console.log('üìñ Parsed OpenAPI annotations from Issues API');
    console.log(`üìä Found ${Object.keys(swaggerSpec.paths).length} API endpoints`);
    console.log(`üìã Found ${Object.keys(swaggerSpec.components.schemas).length} schema definitions`);
    
    // Generate swagger.json
    const swaggerJsonPath = path.join(docsDir, 'swagger.json');
    fs.writeFileSync(swaggerJsonPath, JSON.stringify(swaggerSpec, null, 2));
    
    // Generate index.html for Swagger UI
    const swaggerHtml = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Accessibility Checker Issues API Documentation</title>
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui.css" />
    <style>
        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }
        body {
            margin:0;
            background: #fafafa;
        }
        .swagger-ui .topbar {
            background-color: #1e3a8a;
        }
        .swagger-ui .topbar .download-url-wrapper .select-label {
            color: #fff;
        }
    </style>
</head>
<body>
    <div id="swagger-ui"></div>
    
    <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-bundle.js"></script>
    <script src="https://unpkg.com/swagger-ui-dist@4.15.5/swagger-ui-standalone-preset.js"></script>
    <script>
        window.onload = function() {
            const ui = SwaggerUIBundle({
                url: "./swagger.json",
                dom_id: "#swagger-ui",
                deepLinking: true,
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                ],
                plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                ],
                layout: "StandaloneLayout"
            });
        };
    </script>
</body>
</html>`;
    
    const indexHtmlPath = path.join(docsDir, 'index.html');
    fs.writeFileSync(indexHtmlPath, swaggerHtml);
    
    // Generate README
    const readmeContent = `# Swagger Documentation for Accessibility Checker Issues API

This directory contains auto-generated OpenAPI/Swagger documentation for the Accessibility Checker Issues API.

## Files

- \`swagger.json\` - OpenAPI 3.0 specification (generated from PHP annotations)
- \`index.html\` - Interactive Swagger UI documentation

## Usage

1. **Generate documentation**: Run \`npm run docs:swagger\` to generate these files
2. **View documentation**: Open \`index.html\` in a browser for interactive API documentation
3. **API specification**: Use \`swagger.json\` for importing into tools like Postman or generating SDKs

## How It Works

The documentation is generated by parsing OpenAPI annotations from the Issues API PHP class (\`includes/classes/Rest/IssuesAPI.php\`). The annotations follow the standard OpenAPI 3.0 format:

### Example PHP Annotation Format

\`\`\`php
/**
 * Get a collection of issues.
 *
 * @OA\\Get(
 *     path="/issues",
 *     summary="Retrieve accessibility issues",
 *     description="Get a paginated list of accessibility issues with optional filtering",
 *     tags={"Issues"},
 *     security={{"wpNonce": {}}, {"edacToken": {}}},
 *     @OA\\Parameter(
 *         name="per_page",
 *         in="query",
 *         description="Number of issues to return per page",
 *         @OA\\Schema(type="integer", minimum=1, maximum=100, default=10)
 *     ),
 *     @OA\\Response(
 *         response=200,
 *         description="Successful response",
 *         @OA\\JsonContent(
 *             type="array",
 *             @OA\\Items(ref="#/components/schemas/Issue")
 *         )
 *     )
 * )
 */
public function get_issues( $request ) {
    // Method implementation
}
\`\`\`

## Endpoints Documented

- \`GET /issues\` - Retrieve paginated collection of accessibility issues
- \`POST /issues\` - Create new accessibility issues
- \`GET /issues/{id}\` - Get specific issue details  
- \`PUT /issues/{id}\` - Update existing issues
- \`DELETE /issues/{id}\` - Delete issues
- \`GET /issues/access-check\` - Verify API access permissions
- \`GET /issues/count\` - Get total issue count

## Authentication

The API supports two authentication methods:
- WordPress nonce authentication (X-WP-Nonce header)
- EDAC token authentication (X-EDAD-Token header)

## Integration Examples

### JavaScript (fetch)
\`\`\`javascript
// Get issues with nonce authentication
const response = await fetch('/wp-json/accessibility-checker/v1/issues', {
    headers: {
        'X-WP-Nonce': wpApiSettings.nonce
    }
});
const issues = await response.json();
\`\`\`

### cURL
\`\`\`bash
# Get issues count
curl -X GET \\
  -H "X-WP-Nonce: your-nonce-here" \\
  "/wp-json/accessibility-checker/v1/issues/count"
\`\`\`

---

*This documentation is auto-generated from PHP OpenAPI annotations. Do not edit these files manually.*
*To modify the documentation, update the OpenAPI annotations in the Issues API PHP class.*
`;
    
    const readmePath = path.join(docsDir, 'README.md');
    fs.writeFileSync(readmePath, readmeContent);
    
    console.log('‚úÖ Swagger documentation generated successfully!');
    console.log(`üìÅ Files created in: ${docsDir}`);
    console.log('üìñ Open docs/swagger/index.html to view the documentation');
    console.log('');
    console.log('üìù Documentation generated from OpenAPI annotations in:');
    console.log(`   ${path.relative(process.cwd(), issuesAPIPath)}`);
    
} catch (error) {
    console.error('‚ùå Error generating swagger documentation:', error.message);
    process.exit(1);
}